{"version":3,"sources":["components/Form.jsx","redux/actions/todo.js","components/Item.jsx","components/List.jsx","components/NavBar.jsx","App.js","serviceWorker.js","index.js","redux/reducers/listReducer.js","redux/reducers/rootReducer.js","storage.js"],"names":["Form","dispatch","useDispatch","useState","text","setText","className","action","onSubmit","e","preventDefault","trim","length","type","payload","id","Date","now","toString","completed","addTodo","value","onChange","target","placeholder","Item","todo","state","setState","handlerChange","defaultChecked","handlerInput","onFocus","select","onClick","List","list","useSelector","map","key","NavBar","href","App","Boolean","window","location","hostname","match","store","initialState","listReducer","filter","rootReducer","combineReducers","persistedState","serializedState","localStorage","getItem","JSON","parse","err","load","createStore","subscribe","setItem","stringify","console","error","save","getState","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.0a52e784.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { addTodo } from \"../redux/actions/todo\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nexport const Form = () => {\r\n  const dispatch = useDispatch()\r\n\r\n  const [text, setText] = useState('')\r\n\r\n  const handlerInput = ({ target }) => setText(target.value)\r\n\r\n  const handlerSubmit = (e) => {\r\n    e.preventDefault()\r\n\r\n    if (text.trim().length < 5) return\r\n\r\n    dispatch(addTodo(text.trim()))\r\n    setText('')\r\n  }\r\n\r\n  return (\r\n      <div className=\"row\" >\r\n        <form action=\"submit\" onSubmit={handlerSubmit}>\r\n          <div className=\"file-field input-field\">\r\n            <button className=\"btn\" type='submit'>\r\n              <span>Add</span>\r\n            </button>\r\n            <div className=\"file-path-wrapper\">\r\n              <input\r\n                  className=\"file-path validate\"\r\n                  value={text}\r\n                  onChange={handlerInput}\r\n                  type=\"text\"\r\n                  placeholder=\"Add your todo (min 5 symbols)\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n  )\r\n}\r\n","export const ADD_TODO = 'ADD_TODO'\r\nexport const TOGGLE_TODO = 'TOGGLE_TODO'\r\nexport const DELETE_TODO = 'DELETE_TODO'\r\nexport const CHANGE_TODO = 'CHANGE_TODO'\r\n\r\nexport const addTodo = text => {\r\n  return {\r\n    type: ADD_TODO,\r\n    payload: {\r\n      text,\r\n      id: Date.now().toString(),\r\n      completed: false\r\n    }\r\n  }\r\n}\r\n\r\nexport const toggleTodo = id => {\r\n  return {\r\n    type: TOGGLE_TODO,\r\n    id\r\n  }\r\n}\r\n\r\nexport const deleteTodo = id => {\r\n  return {\r\n    type: DELETE_TODO,\r\n    id\r\n  }\r\n}\r\n\r\nexport const changeTodo = payload => {\r\n  return {\r\n    type: CHANGE_TODO,\r\n    text: payload.text,\r\n    id: payload.id\r\n  }\r\n}\r\n","import React, {useState} from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {changeTodo, deleteTodo, toggleTodo} from \"../redux/actions/todo\";\r\n\r\nexport const Item = ({ todo }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [text, setText] = useState(todo.text)\r\n  const [state, setState] = useState(false)\r\n\r\n  const handlerInput = ({ target }) => {\r\n    setText(target.value)\r\n  }\r\n\r\n  const handlerChange = () => {\r\n    if (!text.trim()) {\r\n      return\r\n    }\r\n\r\n    if (state) {\r\n      dispatch(changeTodo({text, id: todo.id}))\r\n    }\r\n\r\n    setState(!state)\r\n  }\r\n\r\n  return (\r\n      <li className={todo.completed ? 'collection-item completed' : 'collection-item'} >\r\n\r\n        <label onChange={() => {dispatch(toggleTodo(todo.id))}}>\r\n          <input type=\"checkbox\" defaultChecked={todo.completed}/>\r\n          <span>''</span>\r\n        </label>\r\n\r\n        {state\r\n            ? <form action=\"#\" onSubmit={(e) => {\r\n              e.preventDefault()\r\n              handlerChange()\r\n            }}>\r\n                <input\r\n                    type=\"text\"\r\n                    value={text}\r\n                    onChange={(e) => handlerInput(e)}\r\n                    onFocus={(e) => e.target.select()}\r\n                />\r\n              </form>\r\n            : <span>{text}</span>\r\n        }\r\n\r\n        <div className=\"icons\">\r\n          <i className=\"material-icons\" onClick={() => handlerChange()}>create</i>\r\n          <i className=\"material-icons\" onClick={() => dispatch(deleteTodo(todo.id))}>cancel</i>\r\n        </div>\r\n      </li>\r\n  )\r\n}\r\n","import React from \"react\";\r\nimport { useSelector } from 'react-redux'\r\nimport { Item } from \"./Item\";\r\n\r\nexport const List = () => {\r\n  const list = useSelector(state => state.list)\r\n\r\n  return (\r\n      <ul className=\"collection with-header\">\r\n        {\r\n          list.length ? list.map(todo => <Item todo={todo}  key={todo.id}/>)\r\n               : <h4>Your list clear</h4>\r\n        }\r\n      </ul>\r\n  )\r\n}\r\n","import React from \"react\";\r\n\r\nexport const NavBar = () => {\r\n  return (\r\n      <nav>\r\n        <div className=\"nav-wrapper pl-pr-3\">\r\n          <a href=\"/\" className=\"brand-logo\">TO-DO APP</a>\r\n          <ul id=\"nav-mobile\" className=\"right\">\r\n            <li><a href=\"https://github.com/ADiksIT\">GitHub</a></li>\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n  )\r\n}\r\n","import React from 'react';\nimport { Form } from \"./components/Form\";\nimport { List } from \"./components/List\";\nimport { NavBar } from \"./components/NavBar\";\n\nconst App = () => {\n  return (\n    <main>\n      <NavBar />\n      <div className=\"container\">\n        <Form />\n        <List />\n      </div>\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from \"redux\";\nimport { rootReducer } from \"./redux/reducers/rootReducer\";\nimport { Provider } from \"react-redux\";\nimport { load, save } from \"./storage\";\n\nconst persistedState = load();\n\nlet store;\nif (process.env.NODE_ENV === 'development') {\n  store = createStore(rootReducer, persistedState,\n      window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  );\n} else {\n  store = createStore(rootReducer, persistedState);\n}\n\nstore.subscribe(() => save(store.getState()))\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {ADD_TODO, CHANGE_TODO, DELETE_TODO, TOGGLE_TODO} from \"../actions/todo\";\r\n\r\nexport const initialState = [{text: 'Add your first to-do!', completed: false, id:Date.now().toString() }]\r\n\r\nconst listReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n\r\n    case ADD_TODO:\r\n      return [...state, action.payload]\r\n\r\n    case TOGGLE_TODO:\r\n      return state.map(todo => todo.id === action.id ? {...todo, completed: !todo.completed} : todo)\r\n\r\n    case DELETE_TODO:\r\n      return state.filter(todo => todo.id !== action.id)\r\n\r\n    case CHANGE_TODO:\r\n      return state.map(todo => {\r\n        if (todo.id === action.id) todo.text = action.text\r\n        return todo\r\n      })\r\n\r\n    default: return state\r\n  }\r\n}\r\n\r\nexport default listReducer\r\n","import { combineReducers } from 'redux'\r\nimport listReducer from \"./listReducer\";\r\n\r\nexport const rootReducer = combineReducers({ list: listReducer })\r\n","import {initialState} from \"./redux/reducers/listReducer\";\r\n\r\nexport const save = (state) => {\r\n  try {\r\n    return localStorage.setItem('state', JSON.stringify(state))\r\n  } catch (e) {\r\n    console.error('Error localstorage', e)\r\n    return initialState\r\n  }\r\n};\r\n\r\nexport const load = () => {\r\n  try {\r\n    const serializedState = localStorage.getItem(\"state\");\r\n     if (!serializedState) {\r\n       return initialState;\r\n    }\r\n    return JSON.parse(serializedState);\r\n  } catch (err) {\r\n    return initialState;\r\n  }\r\n}\r\n"],"sourceRoot":""}